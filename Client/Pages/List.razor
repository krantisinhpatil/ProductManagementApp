@page "/"
@using ProductManagement.Client.Model
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<PageTitle>Product</PageTitle>

<div class="d-flex justify-content-between"><h1>Products</h1> <div><button class="btn btn-primary" @onclick="@(() => AddProduct())"><i class="fa fa-user-plus"></i> Add Product</button></div> </div>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (this.Detials)
{
    <div class="container">
        <div class="card my-3">

            <div class="card-header ">

                <h3>@product?.ProductName</h3>
            </div>
            <div class="card-body ">
                <h4 class=" mb-2">
                    Price:&nbsp;<span class="text-warning ">@string.Format("{0:c}", product.Price)</span>&nbsp;

                    @if (product.Availability)
                    {
                        <span class="badge text-white text-bg-success">InStock</span>
                    }
                    else
                    {
                        <span class="badge text-white text-bg-danger">OutOfStock</span>
                    }

                </h4> <p class="text-secondary">@product.Description</p>
                <a @onclick="@(() => this.Detials=false)" class="btn btn-md btn-primary me-2 ">Back</a>
                <button type="button" class="btn btn-md btn-success text-white  " @onclick="@(() => Edit(product.ProductId))">
                    Edit
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class=" card table-responsive-lg my-4">
        <table class="table table-striped my-0">
            <thead>
                <tr class="text-center">
                    <th @onclick="@(() => Sort("ProductName"))">
                        Title

                        <i class="fas fa-sort-alpha-@(sortOrder == "asc" ? "down" : "up")"></i>

                    </th>
                    <th @onclick="@(() => Sort("Price"))">
                        Price

                        <i class="fas fa-sort-numeric-@(sortOrder == "asc" ? "down" : "up")"></i>

                    </th>
                    <th>Availability</th>
                    <th style="min-width:300px"> Description</th>
                    <th style="min-width:300px">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr class=" text-center">
                        <td>@product.ProductName</td>
                        <td>@product.Price</td>
                        <td class="text-center">
                            @if (product.Availability)
                            {

                                <span>InStock</span>
                            }
                            else
                            {

                                <span>OutOfStock</span>
                            }
                        </td>
                        <td class="text-start">
                            @product.Description
                        </td>
                        <td>
                            <button type="button" class="btn btn-success" @onclick="@(() => View(product))">
                                <i class="bi bi-eye-fill"></i> View
                            </button>

                            <button type="button" class="btn btn-info mx-2" @onclick="@(() => Edit(product.ProductId))">
                                <i class="bi bi-pencil-square"></i> Edit
                            </button>

                            <button type="button" class="btn btn-danger" @onclick="@(() => Delete(product.ProductId))">
                                <i class="bi bi-trash3-fill"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private Product[]? products;
    private Product? product;
    private string sortOrder = "asc";
    private string sortedColumn = "ProductName";
    private bool Detials = false;


    protected override async Task OnInitializedAsync()
    {
        this.products = await Http.GetFromJsonAsync<Product[]>("api/Product");
    }


    private void Sort(string column)
    {
        if (sortedColumn == column)
        {
            sortOrder = sortOrder == "asc" ? "desc" : "asc";
        }
        else
        {
            sortedColumn = column;
            sortOrder = "asc";
        }

        switch (column)
        {
            case "ProductName":
                products = sortOrder == "asc" ? products.OrderBy(p => p.ProductName).ToArray() : products.OrderByDescending(p => p.ProductName).ToArray();
                break;
            case "Price":
                products = sortOrder == "asc" ? products.OrderBy(p => p.Price).ToArray() : products.OrderByDescending(p => p.Price).ToArray();
                break;
        }
    }

    async void Edit(int productId)
    {
        NavigationManager.NavigateTo($"/edit/{productId}");
    }

    async void AddProduct()
    {
        NavigationManager.NavigateTo($"/create");
    }

    async void View(Product product)
    {
        this.Detials = true;
        this.product = product;
    }

    async Task Delete(int productId)
    {
        NavigationManager.NavigateTo($"/delete/{productId}");
    }
  
}

